var SX = 23, SY = 18, DX = 3, DY = 3, CW = 14, CH = 12, WN = 11, DW = 7;
var SEC_SX = SX, SEC_SY = SY + CH * WN + DY, SEC_W = CW * DW - 1, SEC_H = 5;

var images = {
    IMAGE_PATH: "resources/images/",
    imagePaths: {
        background: "background.png",
        bigNumbers: "big_number_3x5.png",
        numbers: "number_3x5.png",
        letters: "cap_letters.png",
        btMark: "bluetooth_mark.png",
        phoneBattery: "phone_battery.png",
        phoneBatteryCharging: "phone_battery_charging.png",
        battery: "watch_battery.png",
        yesNo: "yes_no.png"
    },
    init: function(callback) {
        "use strict";
        var imagePaths = this.imagePaths;
        var loadedCount = 0;
        var that = this;
        
        var onLoad = function() {
            loadedCount++;
            if (loadedCount === Object.keys(imagePaths).length) {
                callback();
            }
        };
        
        if (Object.keys(this).length <= 3) {
            for (var key in imagePaths) {
                var img = new Image();
                img.src = this.IMAGE_PATH + imagePaths[key];
                this[key] = img;
                img.onload = onLoad;
            }
        }
    }
};

var numbers = {
    bigSize: {w: 42, h: 60},
    tinySize: {w: 3, h: 5},
    __drawNumber: function(ctx, num, x, y, image, size) {
        "use strict";
        ctx.drawImage(image, num * size.w, 0, size.w, size.h, x, y, size.w, size.h);
    },
    drawBig: function(ctx, num, x, y) {
        "use strict";
        this.__drawNumber(ctx, Math.floor(num % 10), x, y, images.bigNumbers, this.bigSize);
    },
    drawTiny: function(ctx, num, x, y) {
        "use strict";
        this.__drawNumber(ctx, Math.floor(num % 10), x, y, images.numbers, this.tinySize);
    }
};

var letters = {
    size: {w: 3, h: 5},
    a: "a".charCodeAt(0),
    A: "A".charCodeAt(0),
    count: 26,
    drawLetter: function(ctx, letter, x, y) {
        "use strict";
        var code = letter.charCodeAt(0);
        var index = code >= this.a ? code - this.a : code - this.A;
        if (index < this.count) {
            ctx.drawImage(images.letters, index * this.size.w, 0, this.size.w, this.size.h, x, y, this.size.w, this.size.h);
        }
    },
    drawString: function(ctx, str, x, y, gap) {
        "use strict";
        for (var i = 0; i < str.length; i++) {
            this.drawLetter(ctx, str.charAt(i), x, y);
            x += this.size.w + gap;
        }
    }
};

var watch = {
    canvas: null,
    ctx: null,
    getConfig: null,
    imageBuff: {buff: null, minTime: 0},
    MON_NAMES: ["JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"],
    FRAME_W: 70,
    FRAME_H: 82,
    
    setCanvas: function(canvas) {
        "use strict";
        this.canvas = canvas;
        if (canvas.getContext) {
            this.ctx = canvas.getContext("2d");
            var prefixes = ["", "o", "ms", "moz", "webkit"];
            for (var i = 0; i < prefixes.length; i++) {
                var prefix = prefixes[i];
                var prop = prefix + (prefix.length === 0 ? "i" : "I") + "mageSmoothingEnabled";
                this.ctx[prop] = false;
            }
            this.ctx.strokeStyle = "#fff";
            this.ctx.fillStyle = "#fff";
        }
    },
    
    beginDraw: function() {
        "use strict";
        if (this.ctx) {
            var that = this;
            window.requestAnimationFrame(function(time) {
                that.draw(time);
                that.beginDraw();
            });
        }
    },
    
    draw: function() {
        "use strict";
        var imgData;
        var now = new Date();
        var minute = Math.floor(now.getTime() / 60000);
        var config = this.getConfig();
        
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        if (this.imageBuff.buff && minute == this.imageBuff.time) {
            this.ctx.putImageData(this.imageBuff.buff, 0, 0);
        } else {
            this.drawBackground();
            this.drawCalendar(now);
            try {
                imgData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
                this.imageBuff.buff = imgData;
                this.imageBuff.time = minute;
            } catch (e) {}
        }
        
        if (config["sec-layer"]) this.drawSeconds(now);
        if (config["battery-layer"]) this.drawBattery(7);
        if (config["bt-phone-layer"]) this.drawBtPhone();
        if (config["frame-layer"]) this.drawFrame(now);
    },
    
    drawBattery: function(percent) {
        "use strict";
        var gap = 2;
        var imgPos = {
            x: SX - 3 - gap - numbers.tinySize.w - images.battery.width,
            y: SY + CH * WN - 1
        };
        var numPos = {
            x: imgPos.x + images.battery.width + gap,
            y: imgPos.y + Math.floor((images.battery.height - numbers.tinySize.h) / 2) + 1
        };
        this.ctx.drawImage(images.battery, imgPos.x, imgPos.y);
        numbers.drawTiny(this.ctx, percent, numPos.x, numPos.y);
    },
    
    drawBtPhone: function() {
        "use strict";
        var battery = navigator.battery || navigator.webkitBattery || navigator.mozBattery;
        var that = this;
        var handleBattery = function(watch, bat) {
            if (bat) {
                watch.drawPhone(bat);
            } else {
                watch.drawBt();
            }
        };
        
        if (navigator.getBattery) {
            navigator.getBattery().then(function(bat) {
                handleBattery(that, bat);
            });
        } else {
            handleBattery(that, battery);
        }
    },
    
    drawBt: function() {
        "use strict";
        var gap = 1;
        var btPos = {
            x: SX + CW * DW + 1,
            y: SY + CH * WN + 0
        };
        var yesnoPos = {
            x: btPos.x + images.btMark.width + gap,
            y: btPos.y + Math.floor((images.btMark.height - images.yesNo.height) / 2)
        };
        this.ctx.drawImage(images.btMark, btPos.x, btPos.y);
        this.ctx.drawImage(images.yesNo, 0, 0, images.yesNo.width / 2, images.yesNo.height,
                          yesnoPos.x, yesnoPos.y, images.yesNo.width / 2, images.yesNo.height);
    },
    
    drawPhone: function(battery) {
        "use strict";
        var gap = 1;
        var imgPos = {
            x: SX + CW * DW + 1 + 2 * (gap + numbers.tinySize.w),
            y: SY + CH * WN - 1
        };
        var numPos = {
            x: imgPos.x - 2 * (gap + numbers.tinySize.w),
            y: imgPos.y + Math.floor((images.phoneBattery.height - numbers.tinySize.h) / 2) + 1
        };
        var percent = Math.round(battery.level * 100);
        
        this.ctx.drawImage(battery.charing ? images.phoneBatteryCharging : images.phoneBattery, imgPos.x, imgPos.y);
        
        if (percent < 100) {
            numbers.drawTiny(this.ctx, percent / 10, numPos.x, numPos.y);
            numPos.x += numbers.tinySize.w + gap;
            numbers.drawTiny(this.ctx, percent, numPos.x, numPos.y);
        } else {
            letters.drawString(this.ctx, "FL", numPos.x, numPos.y, gap);
        }
    },
    
    drawSeconds: function(time) {
        "use strict";
        var numPos = {
            x: this.canvas.width / 2 - numbers.tinySize.w,
            y: SEC_SY
        };
        numbers.drawTiny(this.ctx, time.getSeconds() / 10, numPos.x, numPos.y);
        numbers.drawTiny(this.ctx, time.getSeconds(), numPos.x + numbers.tinySize.w + 1, numPos.y);
        
        var barW = 10;
        var barH = 3;
        var bar = {
            x: SEC_SX + (CW - barW) / 2 - 1,
            y: SEC_SY + (SEC_H - barH) / 2,
            w: barW,
            h: barH
        };
        
        for (var i = 0; i < DW; i++) {
            var dayIndex = i > 3 ? i - 1 : i;
            var sec10 = Math.floor(time.getSeconds() / 10);
            if (sec10 >= dayIndex && i != 3) {
                if (dayIndex === sec10) {
                    bar.w = time.getSeconds() % 10;
                }
                this.ctx.fillRect(bar.x, bar.y, bar.w, bar.h);
            }
            bar.w = barW;
            bar.x += CW;
        }
    },
    
    drawBackground: function() {
        "use strict";
        this.ctx.drawImage(images.background, 0, 0);
        // Draw weekday headers based on config
        this.drawWeekdayHeaders();
    },
    
    drawWeekdayHeaders: function() {
        "use strict";
        var config = this.getConfig();
        var weekStartsMonday = config["week-start-monday"];
        
        var weekdays_upper_sunday = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
        var weekdays_lower_sunday = ['U', 'O', 'U', 'E', 'H', 'R', 'A'];
        var weekdays_upper_monday = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];
        var weekdays_lower_monday = ['O', 'U', 'E', 'H', 'R', 'A', 'U'];
        
        var upper = weekStartsMonday ? weekdays_upper_monday : weekdays_upper_sunday;
        var lower = weekStartsMonday ? weekdays_lower_monday : weekdays_lower_sunday;
        
        var header_y = 11;
        
        for (var i = 0; i < DW; i++) {
            var header_x = SX + (i * CW) + 3;
            
            // Clear old headers with black rectangle
            this.ctx.fillStyle = "#000";
            this.ctx.fillRect(SX + (i * CW), header_y, CW, numbers.tinySize.h + 1);
            
            // Draw new headers
            this.ctx.fillStyle = "#fff";
            letters.drawLetter(this.ctx, upper[i], header_x, header_y);
            letters.drawLetter(this.ctx, lower[i], header_x + numbers.tinySize.w + 2, header_y);
        }
    },
    
    drawCalendar: function(time) {
        "use strict";
        this.drawHourMinute(time);
        this.drawDates(time);
    },
    
    drawHourMinute: function(time) {
        "use strict";
        this.ctx.save();
        this.ctx.globalCompositeOperation = "lighter";
        
        var x1 = SX, x2 = SX + 4 * CW;
        var y1 = SY, y2 = SY + 6 * CH;
        var hour = time.getHours();
        var minute = time.getMinutes();
        
        numbers.drawBig(this.ctx, hour / 10, x1, y1);
        numbers.drawBig(this.ctx, hour, x2, y1);
        numbers.drawBig(this.ctx, minute / 10, x1, y2);
        numbers.drawBig(this.ctx, minute, x2, y2);
        
        this.ctx.restore();
    },
    
    drawDates: function(time) {
        "use strict";
        var firstDay = this.get1stDay(time);
        
        for (var row = 0; row < WN; row++) {
            var todayInRow = false;
            
            for (var col = 0; col < DW; col++) {
                var isToday = firstDay.getDate() === time.getDate() &&
                             firstDay.getMonth() === time.getMonth() &&
                             firstDay.getYear() === time.getYear();
                
                this.drawDate(col, row, firstDay.getDate(), isToday);
                firstDay.setDate(firstDay.getDate() + 1);
                todayInRow = todayInRow || isToday;
            }
            
            var isNewMonth = firstDay.getDate() > 1 && firstDay.getDate() <= DW + 1;
            var shouldShowYear = row === 0 || (firstDay.getMonth() === 0 && isNewMonth);
            
            if (shouldShowYear) {
                this.drawYear(firstDay.getFullYear(), row);
            } else if (todayInRow) {
                this.drawCurrWeekIndicator(row, true);
            }
            
            if (isNewMonth) {
                this.drawMonth(firstDay.getMonth(), row);
            } else if (todayInRow) {
                this.drawCurrWeekIndicator(row, false);
            }
        }
    },
    
    drawYear: function(year, row) {
        "use strict";
        var pos = {
            x: SX - DX - 2 * numbers.tinySize.w - 3,
            y: SY + CH * row
        };
        numbers.drawTiny(this.ctx, year / 1000, pos.x, pos.y);
        pos.x += numbers.tinySize.w + 2;
        numbers.drawTiny(this.ctx, year / 100, pos.x, pos.y);
        pos.y += numbers.tinySize.h + 1;
        numbers.drawTiny(this.ctx, year, pos.x, pos.y);
        pos.x -= numbers.tinySize.w + 2;
        numbers.drawTiny(this.ctx, year / 10, pos.x, pos.y);
    },
    
    drawMonth: function(month, row) {
        "use strict";
        var pos = {
            x: SX + DW * CW + DX,
            y: SY + DY + CH * row
        };
        letters.drawString(this.ctx, this.MON_NAMES[month], pos.x, pos.y, 1);
    },
    
    drawCurrWeekIndicator: function(row, isLeft) {
        "use strict";
        var size = 2;
        var dx = isLeft ? -size : size;
        var pos = {
            x: (isLeft ? SX - DX - size : SX + DW * CW + DX) + 0.5,
            y: SY + CH * row + CH / 2 - 1 + 0.5
        };
        
        this.ctx.save();
        this.ctx.beginPath();
        this.ctx.moveTo(pos.x, pos.y);
        this.ctx.lineTo(pos.x + dx, pos.y - size);
        this.ctx.lineTo(pos.x + dx, pos.y + size);
        this.ctx.closePath();
        this.ctx.stroke();
        this.ctx.fill();
        this.ctx.restore();
    },
    
    drawDate: function(col, row, date, isToday) {
        "use strict";
        var pos = {
            x: SX + DX + CW * col,
            y: SY + DY + CH * row
        };
        
        this.ctx.save();
        this.ctx.globalCompositeOperation = "difference";
        
        if (date > 9) {
            numbers.drawTiny(this.ctx, Math.floor(date / 10), pos.x, pos.y);
        }
        numbers.drawTiny(this.ctx, date % 10, pos.x + 4, pos.y);
        
        if (isToday) {
            this.ctx.strokeRect(pos.x - DX + 1.5, pos.y - DY + 0.5, CW - 4, CH - 2);
            this.ctx.globalCompositeOperation = "lighter";
            this.ctx.strokeRect(pos.x - DX + 0.5, SY - CH + 3.5, CW - 2, CH - 4);
        }
        
        this.ctx.restore();
    },
    
    get1stDay: function(time) {
        "use strict";
        var config = this.getConfig();
        var weekStartsMonday = config["week-start-monday"];
        
        // Get date 11 weeks ago
        var date = new Date(time.getTime() - 60 * 60 * 24 * 7 * 10 * 1000);
        date.setDate(1); // First day of that month
        
        // Calculate offset to week start
        var dayOfWeek = date.getDay(); // 0 = Sunday, 1 = Monday, ...
        var offset;
        
        if (weekStartsMonday) {
            // Monday start: shift Sunday (0) to position 6, rest shift down by 1
            offset = (dayOfWeek === 0) ? 6 : (dayOfWeek - 1);
        } else {
            // Sunday start: use as-is
            offset = dayOfWeek;
        }
        
        date.setDate(date.getDate() - offset);
        return date;
    },
    
    drawFrame: function(time) {
        "use strict";
        this.drawFrameScale();
        this.drawHourLine(time);
        this.drawMinuteLine(time);
    },
    
    drawFrameScale: function() {
        "use strict";
        var scales = [[11,0,1,1],[23,0,1,1],[24,0,1,1],[34,0,1,1],[44,0,1,1],[53,0,1,1],[62,0,1,1],[71,0,1,1],[72,0,1,1],[81,0,1,1],[90,0,1,1],[99,0,1,1],[109,0,1,1],[119,0,1,1],[120,0,1,1],[132,0,1,1],[24,1,1,1],[71,1,1,1],[72,1,1,1],[119,1,1,1],[24,2,1,1],[71,2,1,1],[72,2,1,1],[119,2,1,1],[0,4,1,1],[143,4,1,1],[0,19,1,1],[143,19,1,1],[0,31,1,1],[143,31,1,1],[0,42,1,1],[143,42,1,1],[0,43,1,1],[1,43,1,1],[2,43,1,1],[141,43,1,1],[142,43,1,1],[143,43,1,1],[0,51,1,1],[143,51,1,1],[0,60,1,1],[143,60,1,1],[0,68,1,1],[143,68,1,1],[0,76,1,1],[143,76,1,1],[0,83,1,1],[1,83,1,1],[2,83,1,1],[141,83,1,1],[142,83,1,1],[143,83,1,1],[0,84,1,1],[1,84,1,1],[2,84,1,1],[141,84,1,1],[142,84,1,1],[143,84,1,1],[0,91,1,1],[143,91,1,1],[0,99,1,1],[143,99,1,1],[0,107,1,1],[143,107,1,1],[0,116,1,1],[143,116,1,1],[0,124,1,1],[1,124,1,1],[2,124,1,1],[141,124,1,1],[142,124,1,1],[143,124,1,1],[0,125,1,1],[143,125,1,1],[0,136,1,1],[143,136,1,1],[0,148,1,1],[143,148,1,1],[0,163,1,1],[143,163,1,1],[24,165,1,1],[71,165,1,1],[72,165,1,1],[119,165,1,1],[24,166,1,1],[71,166,1,1],[72,166,1,1],[119,166,1,1],[11,167,1,1],[23,167,1,1],[24,167,1,1],[34,167,1,1],[44,167,1,1],[53,167,1,1],[62,167,1,1],[71,167,1,1],[72,167,1,1],[81,167,1,1],[90,167,1,1],[99,167,1,1],[109,167,1,1],[119,167,1,1],[120,167,1,1],[132,167,1,1]];
        
        for (var i = 0; i < scales.length; i++) {
            var scale = scales[i];
            this.ctx.fillRect(scale[0], scale[1], scale[2], scale[3]);
        }
    },
    
    drawHourLine: function(time) {
        "use strict";
        var totalMinutes = (time.getHours() % 12) * 60 + time.getMinutes();
        var angle = totalMinutes * Math.PI * 2 / 720;
        this.drawFrameLine(time, angle, this.FRAME_W, this.FRAME_H, true);
    },
    
    drawMinuteLine: function(time) {
        "use strict";
        var totalSeconds = time.getMinutes() * 60 + time.getSeconds();
        var angle = totalSeconds * Math.PI * 2 / 3600;
        this.drawFrameLine(time, angle, this.FRAME_W, this.FRAME_H, false);
    },
    
    drawFrameLine: function(time, angle, frameW, frameH, isHour) {
        "use strict";
        var center = {
            x: this.canvas.width / 2 - 0.5,
            y: this.canvas.height / 2 - 0.5
        };
        
        this.ctx.save();
        
        if (isHour) {
            this.ctx.beginPath();
            this.ctx.moveTo(center.x, center.y);
            this.ctx.arc(center.x, center.y, this.canvas.width + this.canvas.height, -Math.PI / 2, angle - Math.PI / 2, false);
            this.ctx.clip();
            this.ctx.strokeRect(center.x - frameW, center.y - frameH, 2 * frameW + 1, 2 * frameH + 1);
        } else if (time.getMilliseconds() < 650) {
            var endpoint = {x: 0, y: 0};
            
            if (angle === 0) {
                endpoint.y = -frameH;
            } else if (angle == Math.PI) {
                endpoint.y = frameH;
            } else {
                angle -= Math.PI / 2;
                var cotangent = 1 / Math.tan(angle);
                endpoint.y = (angle < 0 || angle > Math.PI) ? -frameH : frameH;
                endpoint.x = Math.round(endpoint.y * cotangent);
                
                if (Math.abs(endpoint.x) > frameW) {
                    endpoint.x = Math.sign(endpoint.x) * frameW;
                    endpoint.y = Math.round(endpoint.x / cotangent);
                }
            }
            
            var arrowPos = {
                x: center.x + endpoint.x + 0.5 * Math.sign(endpoint.x),
                y: center.y + endpoint.y + 0.5 * Math.sign(endpoint.y)
            };
            
            var cornerDist = 2;
            var isNearCorner = (frameW - Math.abs(endpoint.x) < cornerDist) && 
                              (frameH - Math.abs(endpoint.y) < cornerDist);
            
            var arrowW = 2;
            var arrowH = 2;
            var arrowAngle;
            
            if (Math.abs(endpoint.y) === frameH) {
                arrowAngle = Math.sign(endpoint.y) * Math.PI / 2;
                if (isNearCorner) {
                    arrowAngle -= Math.sign(endpoint.x) * Math.sign(endpoint.y) * Math.PI / 4;
                }
            } else {
                arrowAngle = endpoint.x > 0 ? 0 : Math.PI;
                if (isNearCorner) {
                    arrowAngle += Math.sign(endpoint.x) * Math.sign(endpoint.y) * Math.PI / 4;
                }
            }
            
            this.ctx.translate(arrowPos.x + 0.5, arrowPos.y + 0.5);
            this.ctx.rotate(arrowAngle);
            this.ctx.beginPath();
            this.ctx.moveTo(-arrowH, 0);
            this.ctx.lineTo(-arrowH - arrowW, -arrowW);
            this.ctx.lineTo(-arrowH - arrowW, arrowW);
            this.ctx.closePath();
            this.ctx.stroke();
            this.ctx.fill();
        }
        
        this.ctx.restore();
    }
};
